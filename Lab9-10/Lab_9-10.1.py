import tkinter as tk
from tkinter import ttk, messagebox as mb
import os
from idlelib.tooltip import Hovertip

class LoginWindow: #–æ–∫–æ—à–∫–æ –≤—Ö–æ–¥–∞\—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        self.window.geometry('550x560')
        self.window.resizable(False, False)
        self.style = ttk.Style()
        self.style.configure('TLabel', font=('Bahnschrift', 18), padding=10)
        self.style.configure('Btt.TButton', font= ('Bahnschrift bold', 14), width=25, padding=7)

        self.testL = ttk.Label(self.window, text='–í–•–û–î').place(relx=0.5, rely=0.15, anchor=tk.CENTER)
        self.testL = ttk.Label(self.window, text='–¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞', font=('Bahnschrift', 12)).place(relx=0.5, rely=0.22, anchor=tk.CENTER)
        self.login_label = ttk.Label(self.window, text="üë§–õ–æ–≥–∏–Ω:").place(relx=0.28, rely=0.4, anchor=tk.CENTER)
        self.login_entry = ttk.Entry(self.window)
        self.login_entry.config(validate='key', validatecommand=(self.window.register(self.validate_length), "%P"), font= 'Bahnschrift 14', width=12)
        self.login_entry.place(relx=0.5, rely=0.4, anchor=tk.CENTER)
        self.password_label = ttk.Label(self.window, text="üîë–ü–∞—Ä–æ–ª—å:").place(relx=0.27, rely=0.5, anchor=tk.CENTER)
        self.password_entry = ttk.Entry(self.window, show='*')
        self.password_entry.config(validate='key', validatecommand=(self.window.register(self.validate_length), "%P"), font= 'Bahnschrift 14', width=12)
        self.password_entry.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
        self.toggle_password_button = ttk.Button(self.window, text='–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å', command=self.show_password, cursor='hand2')
        self.toggle_password_button.place(relx=0.71, rely=0.5, anchor=tk.CENTER)
        self.login_button = ttk.Button(self.window, text="–í—Ö–æ–¥", command=self.login,  cursor='hand2', style='Btt.TButton')
        self.login_button.place(relx=0.5, rely=0.65, anchor=tk.CENTER)
        self.register_button = ttk.Button(self.window, width=25, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", command=self.register,  cursor='hand2', style='Btt.TButton')
        self.register_button.place(relx=0.5, rely=0.75, anchor=tk.CENTER)
        self.TipLogin = Hovertip(self.login_entry,'–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ \n –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É, \n –º–∞–∫—Å. –¥–ª–∏–Ω–∞ - 10 —Å–∏–º–≤–æ–ª–æ–≤')
        self.TipPassword = Hovertip(self.password_entry,'–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 7 —Å–∏–º–≤–æ–ª–æ–≤ \n –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏ –æ–¥–Ω—É –±—É–∫–≤—É, \n –º–∞–∫—Å. –¥–ª–∏–Ω–∞ - 10 —Å–∏–º–≤–æ–ª–æ–≤')

        if not os.path.exists('DataFile.json'): #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
            with open('DataFile.json', 'w'): pass
    def login(self): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
        login = self.login_entry.get()
        password = self.password_entry.get()
        if not login or not password:
            mb.showerror("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        with open("DataFile.json", "r") as file: #—á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            lines = file.readlines()
            user_found = False
            incorrect_password = False
            for line in lines:
                stored_name, stored_username, stored_password = line.strip().split('‚Ä¢')
                if login == stored_username:
                    if password == stored_password:
                        user_found = True
                        name = stored_name
                        self.open_account_window(name)
                        break
                    else:
                        incorrect_password = True
                        break
            if not user_found or incorrect_password:
                mb.showerror("–í—Ö–æ–¥", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            return
    def register(self): #–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        self.register_button.destroy()
        self.name_label = ttk.Label(self.window, text="üñå–ò–º—è:").place(relx=0.3, rely=0.3, anchor=tk.CENTER)
        self.name_entry = ttk.Entry(self.window)
        self.name_entry.config(validate='key', validatecommand=(self.window.register(self.validate_length), "%P"), font= 'Bahnschrift 14', width=12)
        self.name_entry.place(relx=0.5, rely=0.3, anchor=tk.CENTER)
        self.TipName = Hovertip(self.name_entry,'–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–æ—é –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤, \n–Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤')
        self.reg_button = ttk.Button(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", command=self.add_user, cursor = 'hand2', style='Btt.TButton').place(relx=0.5, rely=0.75, anchor=tk.CENTER)
        self.textL2 = ttk.Label(self.window, text='–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø').place(relx=0.5, rely=0.15, anchor=tk.CENTER)
    def validate_length(self, text):#–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –¥–æ –¥–µ—Å—è—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
        if len(text) <= 10:
            return True
        else:
            return False
    def add_user(self):#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        name = self.name_entry.get()
        login = self.login_entry.get()
        password = self.password_entry.get()
        if not name or not login or not password:
            mb.showwarning('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
            return
        else: #–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            if (len(name) < 2) or (len(login) < 5) or (len(password) < 7):
                mb.showwarning('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ.')
                return
            elif not any(char.isdigit() for char in login):
                mb.showwarning('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.')
                return
            elif not any(char.isdigit() for char in password) or not any(char.isalpha() for char in password):
                mb.showwarning('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏ –æ–¥–Ω—É –±—É–∫–≤—É.')
                return

        with open("DataFile.json", "r") as file: #—á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Å—Ö–æ–∂–µ–≥–æ
            lines = file.readlines()
            for line in lines:
                _, stored_login, _ = line.strip().split('‚Ä¢') #–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ –ø–æ–∏—Å–∫–µ –≤—Å—ë –∫—Ä–æ–º–µ –ª–æ–≥–∏–Ω–∞
                if login == stored_login:
                    mb.showwarning("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return
        with open('DataFile.json', 'a') as file: #–∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–∏–∫ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
            file.write(f'{name}‚Ä¢{login}‚Ä¢{password}\n')
            mb.showinfo('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
            self.open_account_window(name)
    def open_account_window(self, name): #–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        self.account_window = tk.Tk()
        self.account_window.geometry('450x360')
        self.account_window.resizable(False,False)
        self.account_window.title("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
        self.window.destroy()
        self.info_label = ttk.Label(self.account_window,font=('Bahnschrift', 18), text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}!" .format(name)).place(relx=0.5, rely=0.35, anchor=tk.CENTER)
        self.info_label_mini = ttk.Label(self.account_window, font=('Bahnschrift', 10),text="–í—ã –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å \n–≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º").place(relx=0.5, rely=0.45,anchor=tk.CENTER)
        self.logout_button = ttk.Button(self.account_window, text="–ù–ê–ß–ê–¢–¨ –ò–ì–†–£", command=self.logout, cursor='hand2', width=25).place(relx=0.5, rely=0.65, anchor=tk.CENTER)
    def logout(self): #–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        self.account_window.destroy()
        self.board1 = TicTacToe()
        self.board1.window_board()
    def show_password(self): #–¥–ª—è —Å–∫—Ä—ã—Ç–∏–µ\–ø–æ–∫–∞–∑–∞ –ø–∞—Ä–æ–ª—è
        if self.password_entry.cget("show") == "*":
            self.password_entry.config(show="")
            self.toggle_password_button.config(text="–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å")
        else:
            self.password_entry.config(show="*")
            self.toggle_password_button.config(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å")
    def start(self):
        self.window.mainloop()

class TicTacToe: #–æ–∫–æ—à–∫–æ —Å –∏–≥—Ä–æ–π
    def __init__(self):
        pass
    def window_board(self):
        self.game_window = tk.Tk()
        self.game_window.geometry('512x520')
        self.game_window.resizable(False, False)
        self.game_window.title("–ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏")
        self.buttons = [[tk.Button(self.game_window, text='', font=('normal', 30), width=7,height=3, cursor='hand2',
                                   command= lambda row=i, col=j: self.tap(row, col)) for j in range(3)] for i in range(3)]
        for i in range(3): #–¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä—è–¥–∞–º
            for j in range(3):
                self.buttons[i][j].grid(row=i, column=j)
                self.buttons[i][j].bind("<Enter>", self.enter_button)
                self.buttons[i][j].bind("<Leave>", self.leave_button)
        self.game_matrix = [['' for _ in range(3)] for _ in range(3)] #–º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        self.player_turn = True

    def enter_button(self, event): #–ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        button = event.widget
        if button.cget('state') == tk.NORMAL:
            button.config(bg="light blue")
    def leave_button(self, event):
        button = event.widget
        if button.cget('state') == tk.NORMAL:
            button.config(bg="SystemButtonFace")

    def tap(self, row, col):#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è
        if self.game_matrix[row][col] == '' and self.player_turn: #–¥–ª—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
            self.buttons[row][col].config(state=tk.DISABLED, text='X')
            self.game_matrix[row][col] = 'X'
            if self.check('X'):
                self.end_game('X')
            elif all([cell != '' for row in self.game_matrix for cell in row]):
                self.end_game('drawn_game')
            else:#–¥–ª—è —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
                self.player_turn = False
                row, col = self.computer_move()
                self.game_matrix[row][col] = 'O'
                self.buttons[row][col].config(text='O', state=tk.DISABLED)
                if self.check('O'):
                    self.end_game('O')
                elif all([cell != '' for row in self.game_matrix for cell in row]):
                    self.end_game('drawn_game')
                else:
                    self.player_turn = True
    def computer_move(self): #—Ä–∞—Å—á–µ—Ç –ª—É—á—à–µ–≥–æ —Ö–æ–¥—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–Ω–∏–º–∞–∫—Å–∞
        best_score = float('-inf')
        best_move = None
        alpha = float('-inf')
        beta = float('inf')
        for i in range(3):
            for j in range(3):
                if self.game_matrix[i][j] == '':
                    self.game_matrix[i][j] = 'O'
                    score = self.minimax(0, False, alpha, beta)
                    self.game_matrix[i][j] = ''
                    if score > best_score:
                        best_score = score
                        best_move = (i, j)
                    alpha = max(alpha, score)
        return best_move
    def minimax(self, depth, is_maximizing, alpha, beta):#—Ä–µ–∫—É—Ä—Å–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–±–æ—Ä–æ–º —Ö–æ–¥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª—å—Ñ–∞-–±–µ—Ç–∞ –æ—Ç—Å–µ—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –ø–ª–æ—Ö–∏—Ö —Ö–æ–¥–æ–≤
        if self.check('X'):
            return -1 * depth
        elif self.check('O'):
            return depth
        elif all([cell != '' for row in self.game_matrix for cell in row]):
            return 0
        if is_maximizing:
            best_score = float('-inf')
            for i in range(3):
                for j in range(3):
                    if self.game_matrix[i][j] == '':
                        self.game_matrix[i][j] = 'O'
                        score = self.minimax(depth + 1, False, alpha, beta)
                        self.game_matrix[i][j] = ''
                        best_score = max(best_score, score)
                        alpha = max(alpha, score)
                        if beta <= alpha:
                            break
            return best_score
        else:
            best_score = float('inf')
            for i in range(3):
                for j in range(3):
                    if self.game_matrix[i][j] == '':
                        self.game_matrix[i][j] = 'X'
                        score = self.minimax(depth + 1, True, alpha, beta)
                        self.game_matrix[i][j] = ''
                        best_score = min(best_score, score)
                        beta = min(beta, score)
                        if beta <= alpha:
                            break
            return best_score
    def check(self, player):#–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        return any(all(cell == player for cell in row) for row in self.game_matrix) or \
               any(all(self.game_matrix[j][i] == player for j in range(3)) for i in range(3)) or \
               all(self.game_matrix[i][i] == player for i in range(3)) or \
               all(self.game_matrix[i][2 - i] == player for i in range(3))
    def eval(self):#–∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if self.check('O'):
            return 1
        elif self.check('X'):
            return -1
        else:
            return 0
    def reset_game(self):# —Å–±—Ä–æ—Å –¥–ª—è –Ω–≤–æ–æ–π –∏–≥—Ä—ã
        self.game_matrix = [['' for _ in range(3)] for _ in range(3)]
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].bind("<Enter>", self.enter_button)
                self.buttons[i][j].bind("<Leave>", self.leave_button)
                self.buttons[i][j].config(text='', state='normal', command=lambda row=i, col=j: self.tap(row, col))
        self.player_turn = True
    def end_game(self, result):#–≤—ã–≤–æ–¥ –æ –ø–æ–±–µ–¥–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ\—Å–±—Ä–æ—Å
        messages = {'O': '–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª.', 'X':'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!', 'drawn_game':'–ù–∏—á—å—è.'}
        message = messages.get(result, '')
        if message:
            answer = mb.askquestion('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞', f'{message} \n –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?')
            if answer == 'yes':
                self.reset_game()
            else:
                self.game_window.destroy()

def main(): #–∑–∞–ø—É—Å–∫ —Å–∞–º–æ–≥–æ –æ–∫–Ω–∞
    login_window = LoginWindow()
    login_window.start()
if __name__ == "__main__":# –ì–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã
    main()
