''' Вариант 2. Вычислить сумму знакопеременного ряда |х^(2n+1)|/(2n+1)!, где х-матрица ранга к (к и матрица задаются
 случайным образом), n - номер слагаемого. Сумма считается вычисленной, если точность вычислений будет не меньше t
 знаков после запятой. У алгоритма д.б. линейная сложность. Операция умножения –поэлементная. Знак первого слагаемого +.'''
import numpy as np
from decimal import Decimal, getcontext
def custom_sum(x, t):# Принимает матрицу x и точность t для вычисления суммы знакопеременного ряда.
    znam, n = 1, 1 # Инициализация переменных
    summa, delta = 0, 0
    matrix_power = x
    while abs(delta) < Decimal('1e-{}'.format(t)):# Цикл для вычисления суммы ряда с учетом точности продолжается пока слагаемое не будет меньше t.
        matrix_power *= np.dot(x, x)   # Обновление степени матрицы.
        znam *= (2 * n) * (2 * n + 1)# Вычисление знаменателя для текущего слагаемого.
        delta = Decimal(np.linalg.det(matrix_power)) / Decimal(znam)# Вычисление текущего слагаемого и добавление его к общей сумме.
        summa += (-1) * delta
        # print(f'Степень матрицы {2*n+1}: \n {matrix_power}')
        n += 1
        # print(n - 1, ':', f'Текущая сумма: {summa},\n Слагаемое {delta}, \n Текущий знаменатель: {znam}')  # Печать значений для отладки.
    print(f'Количество итераций: {n - 1}')
    return summa # Возвращение вычисленной суммы ряда.
try:
    t = int(input("Введите число t, являющееся точностью (количеством знаков после запятой): "))# Ввод точности t от пользователя.
    while t > 100 or t < 1:# Проверка на допустимость введенной точности.
        t = int(input("Введите число t, большее или равное 1:\n"))
    k = np.random.randint(2, 10)# Генерация случайной размерности матрицы от 2 до 10.
    x = np.random.uniform(-1.0, 1.0, size=(k, k)).astype(float)# Генерация случайной вещественной матрицы размера (k, k).
    Rang = np.linalg.matrix_rank(x)# Вычисление ранга матрицы x.
    getcontext().prec = t + 100# Установка точности для десятичных вычислений.
    np.set_printoptions(linewidth=200)
    print("Сгенерированная матрица:\n", x)# Печать сгенерированной матрицы и ее ранга.
    print("Ранг матрицы:", Rang)
    summa = custom_sum(x, t)# Вычисление суммы ряда и округление до указанной точности.
    rounded_summa = round(summa, t)
    print(f"Сумма ряда с точностью {t} знаков после запятой с округлением: {rounded_summa}")
except ValueError:# Обработка ошибки ввода (если введено не число).
    print("\nВведенный символ не является числом. Перезапустите программу и введите число.")
